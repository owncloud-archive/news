(function(angular, $, moment, undefined){

/**
 * ownCloud News App - v0.0.1
 *
 * Copyright (c) 2013 - Bernhard Posselt <nukeawhale@gmail.com>
 *
 * This file is licensed under the Affero General Public License version 3 or later.
 * See the COPYING file
 *
 */


// Generated by CoffeeScript 1.6.2
/*

ownCloud - News

@author Bernhard Posselt
@copyright 2012 Bernhard Posselt nukeawhale@gmail.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
License as published by the Free Software Foundation; either
version 3 of the License, or any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU AFFERO GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU Affero General Public
License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  angular.module('News', ['OC', 'ui']).config(function($provide) {
    var config;

    return $provide.value('Config', config = {
      markReadTimeout: 500,
      scrollTimeout: 500,
      feedUpdateInterval: 1000 * 60 * 3,
      itemBatchSize: 20,
      undoTimeout: 1000 * 10,
      autoPageFactor: 10
    });
  });

  angular.module('News').run([
    'Persistence', 'Config', function(Persistence, Config) {
      Persistence.init();
      return setInterval(function() {
        Persistence.getAllFeeds(null, false);
        return Persistence.getAllFolders(null, false);
      }, Config.feedUpdateInterval);
    }
  ]);

  $(document).ready(function() {
    return $(this).keyup(function(e) {
      if ((e.which === 116) || (e.which === 82 && e.ctrlKey)) {
        document.location.reload(true);
        return false;
      }
    });
  });

}).call(this);

// Generated by CoffeeScript 1.6.2
/*

ownCloud - News

@author Bernhard Posselt
@copyright 2012 Bernhard Posselt nukeawhale@gmail.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
License as published by the Free Software Foundation; either
version 3 of the License, or any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU AFFERO GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU Affero General Public
License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  angular.module('News').directive('droppable', [
    '$rootScope', function($rootScope) {
      return function(scope, elm, attr) {
        var $elem, details;

        $elem = $(elm);
        details = {
          accept: '.feed',
          hoverClass: 'drag-and-drop',
          greedy: true,
          drop: function(event, ui) {
            var data;

            $('.drag-and-drop').removeClass('drag-and-drop');
            data = {
              folderId: parseInt($elem.data('id'), 10),
              feedId: parseInt($(ui.draggable).data('id'), 10)
            };
            $rootScope.$broadcast('moveFeedToFolder', data);
            return scope.$apply(attr.droppable);
          }
        };
        return $elem.droppable(details);
      };
    }
  ]);

}).call(this);

// Generated by CoffeeScript 1.6.2
/*

ownCloud - News

@author Bernhard Posselt
@copyright 2012 Bernhard Posselt nukeawhale@gmail.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
License as published by the Free Software Foundation; either
version 3 of the License, or any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU AFFERO GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU Affero General Public
License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  angular.module('News').directive('itemShortcuts', [
    '$window', function($window) {
      return function(scope, elm, attr) {
        var getCurrentItem, jumpTo, jumpToNextItem, jumpToPreviousItem, keepUnreadCurrentItem, starCurrentItem;

        jumpTo = function($scrollArea, $item) {
          var position;

          position = $item.offset().top - $scrollArea.offset().top + $scrollArea.scrollTop();
          return $scrollArea.scrollTop(position);
        };
        jumpToPreviousItem = function(scrollArea) {
          var $item, $items, $previous, $scrollArea, item, notJumped, _i, _len;

          $scrollArea = $(scrollArea);
          $items = $scrollArea.find('.feed_item');
          notJumped = true;
          for (_i = 0, _len = $items.length; _i < _len; _i++) {
            item = $items[_i];
            $item = $(item);
            if ($item.position().top >= 0) {
              $previous = $item.prev();
              if ($previous.length > 0) {
                jumpTo($scrollArea, $previous);
              }
              notJumped = false;
              break;
            }
          }
          if ($items.length > 0 && notJumped) {
            return jumpTo($scrollArea, $items.last());
          }
        };
        jumpToNextItem = function(scrollArea) {
          var $item, $items, $scrollArea, item, _i, _len, _results;

          $scrollArea = $(scrollArea);
          $items = $scrollArea.find('.feed_item');
          _results = [];
          for (_i = 0, _len = $items.length; _i < _len; _i++) {
            item = $items[_i];
            $item = $(item);
            if ($item.position().top > 1) {
              jumpTo($scrollArea, $item);
              break;
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };
        getCurrentItem = function(scrollArea) {
          var $item, $items, $scrollArea, item, _i, _len;

          $scrollArea = $(scrollArea);
          $items = $scrollArea.find('.feed_item');
          for (_i = 0, _len = $items.length; _i < _len; _i++) {
            item = $items[_i];
            $item = $(item);
            if (($item.height() + $item.position().top) > 110) {
              return $item;
            }
          }
        };
        keepUnreadCurrentItem = function(scrollArea) {
          var $item;

          $item = getCurrentItem(scrollArea);
          return $item.find('.keep_unread').trigger('click');
        };
        starCurrentItem = function(scrollArea) {
          var $item;

          $item = getCurrentItem(scrollArea);
          return $item.find('.star').trigger('click');
        };
        return $($window.document).keydown(function(e) {
          var focused, scrollArea;

          focused = $(':focus');
          if (!(focused.is('input') || focused.is('select') || focused.is('textarea') || focused.is('checkbox') || focused.is('button'))) {
            scrollArea = elm;
            if (e.keyCode === 74 || e.keyCode === 39 || e.keyCode === 78) {
              return jumpToNextItem(scrollArea);
            } else if (e.keyCode === 75 || e.keyCode === 37 || e.keyCode === 80) {
              return jumpToPreviousItem(scrollArea);
            } else if (e.keyCode === 85) {
              return keepUnreadCurrentItem(scrollArea);
            } else if (e.keyCode === 73 || e.keyCode === 83 || e.keyCode === 76) {
              return starCurrentItem(scrollArea);
            } else if (e.keyCode === 72) {
              starCurrentItem(scrollArea);
              return jumpToNextItem(scrollArea);
            }
          }
        });
      };
    }
  ]);

}).call(this);

// Generated by CoffeeScript 1.6.2
/*

ownCloud - News

@author Bernhard Posselt
@copyright 2012 Bernhard Posselt nukeawhale@gmail.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
License as published by the Free Software Foundation; either
version 3 of the License, or any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU AFFERO GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU Affero General Public
License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  var markingRead, scrolling;

  scrolling = true;

  markingRead = true;

  angular.module('News').directive('newsItemScroll', [
    '$rootScope', 'Config', function($rootScope, Config) {
      return function(scope, elm, attr) {
        return elm.bind('scroll', function() {
          var counter, item, _i, _ref, _results;

          if (scrolling) {
            scrolling = false;
            setTimeout(function() {
              return scrolling = true;
            }, Config.ScrollTimeout);
            if (markingRead) {
              markingRead = false;
              setTimeout(function() {
                var $elems, feedItem, id, offset, _i, _len, _results;

                markingRead = true;
                $elems = elm.find('.feed_item:not(.read)');
                _results = [];
                for (_i = 0, _len = $elems.length; _i < _len; _i++) {
                  feedItem = $elems[_i];
                  offset = $(feedItem).position().top;
                  if (offset <= -50) {
                    id = parseInt($(feedItem).data('id'), 10);
                    _results.push($rootScope.$broadcast('readItem', id));
                  } else {
                    break;
                  }
                }
                return _results;
              }, Config.MarkReadTimeout);
            }
            counter = 0;
            _ref = elm.find('.feed_item');
            _results = [];
            for (_i = _ref.length - 1; _i >= 0; _i += -1) {
              item = _ref[_i];
              if (counter >= Config.autoPageFactor) {
                break;
              }
              if ($(item).position().top < 0) {
                $rootScope.$broadcast('autoPage');
                break;
              }
              _results.push(counter += 1);
            }
            return _results;
          }
        });
      };
    }
  ]);

}).call(this);

// Generated by CoffeeScript 1.6.2
/*

ownCloud - News

@author Bernhard Posselt
@copyright 2012 Bernhard Posselt nukeawhale@gmail.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
License as published by the Free Software Foundation; either
version 3 of the License, or any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU AFFERO GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU Affero General Public
License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  angular.module('News').directive('undoNotification', [
    '$rootScope', '$timeout', 'Config', function($rootScope, $timeout, Config) {
      return function(scope, elm, attr) {
        var caption, timeout, undo;

        undo = function() {};
        caption = '';
        timeout = null;
        $(elm).click(function() {
          var timout;

          timout = null;
          return $(this).fadeOut();
        });
        $(elm).find('a').click(function() {
          var timout;

          undo();
          timout = null;
          $rootScope.$apply();
          return elm.fadeOut();
        });
        scope.getCaption = function() {
          return caption;
        };
        return scope.$on('undoMessage', function(scope, data) {
          var _this = this;

          if (timeout) {
            $timeout.cancel(timeout.promise);
          }
          timeout = $timeout(function() {
            return $(elm).fadeOut();
          }, Config.undoTimeout);
          undo = data.undoCallback;
          caption = data.caption;
          return $(elm).fadeIn().css("display", "inline");
        });
      };
    }
  ]);

}).call(this);

// Generated by CoffeeScript 1.6.2
/*

ownCloud - News

@author Bernhard Posselt
@copyright 2012 Bernhard Posselt nukeawhale@gmail.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
License as published by the Free Software Foundation; either
version 3 of the License, or any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU AFFERO GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU Affero General Public
License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  angular.module('News').controller('FeedController', [
    '$scope', '_ExistsError', 'Persistence', 'FolderBusinessLayer', 'FeedBusinessLayer', 'SubscriptionsBusinessLayer', 'StarredBusinessLayer', 'unreadCountFormatter', 'ActiveFeed', 'FeedType', '$window', function($scope, _ExistsError, Persistence, FolderBusinessLayer, FeedBusinessLayer, SubscriptionsBusinessLayer, StarredBusinessLayer, unreadCountFormatter, ActiveFeed, FeedType, $window) {
      var FeedController;

      FeedController = (function() {
        function FeedController(_$scope, _persistence, _folderBusinessLayer, _feedBusinessLayer, _subscriptionsBusinessLayer, _starredBusinessLayer, _unreadCountFormatter, _activeFeed, _feedType, _$window) {
          var _this = this;

          this._$scope = _$scope;
          this._persistence = _persistence;
          this._folderBusinessLayer = _folderBusinessLayer;
          this._feedBusinessLayer = _feedBusinessLayer;
          this._subscriptionsBusinessLayer = _subscriptionsBusinessLayer;
          this._starredBusinessLayer = _starredBusinessLayer;
          this._unreadCountFormatter = _unreadCountFormatter;
          this._activeFeed = _activeFeed;
          this._feedType = _feedType;
          this._$window = _$window;
          this._isAddingFolder = false;
          this._isAddingFeed = false;
          this._$scope.folderBusinessLayer = this._folderBusinessLayer;
          this._$scope.feedBusinessLayer = this._feedBusinessLayer;
          this._$scope.subscriptionsBusinessLayer = this._subscriptionsBusinessLayer;
          this._$scope.starredBusinessLayer = this._starredBusinessLayer;
          this._$scope.unreadCountFormatter = this._unreadCountFormatter;
          this._$scope.getTotalUnreadCount = function() {
            var count, title, titleCount;

            count = _this._subscriptionsBusinessLayer.getUnreadCount(0);
            if (count > 0) {
              titleCount = _this._unreadCountFormatter(count);
              title = 'News (' + titleCount + ') | ownCloud';
            } else {
              title = 'News | ownCloud';
            }
            if (_this._$window.document.title !== title) {
              _this._$window.document.title = title;
            }
            return count;
          };
          this._$scope.isAddingFolder = function() {
            return _this._isAddingFolder;
          };
          this._$scope.isAddingFeed = function() {
            return _this._isAddingFeed;
          };
          this._$scope.addFeed = function(feedUrl, parentFolderId) {
            var error;

            if (parentFolderId == null) {
              parentFolderId = 0;
            }
            _this._$scope.feedExistsError = false;
            try {
              _this._isAddingFeed = true;
              if (parentFolderId !== 0) {
                _this._folderBusinessLayer.open(parentFolderId);
              }
              return _this._feedBusinessLayer.create(feedUrl, parentFolderId, function(data) {
                _this._$scope.feedUrl = '';
                _this._isAddingFeed = false;
                return _this._feedBusinessLayer.load(data['feeds'][0].id);
              }, function() {
                return _this._isAddingFeed = false;
              });
            } catch (_error) {
              error = _error;
              if (error instanceof _ExistsError) {
                _this._$scope.feedExistsError = true;
              }
              return _this._isAddingFeed = false;
            }
          };
          this._$scope.addFolder = function(folderName) {
            var error;

            _this._$scope.folderExistsError = false;
            try {
              _this._isAddingFolder = true;
              return _this._folderBusinessLayer.create(folderName, function(data) {
                var activeId;

                _this._$scope.folderName = '';
                _this._$scope.addNewFolder = false;
                _this._isAddingFolder = false;
                activeId = data['folders'][0].id;
                return _this._$scope.folderId = _this._folderBusinessLayer.getById(activeId);
              }, function() {
                return _this._isAddingFolder = false;
              });
            } catch (_error) {
              error = _error;
              if (error instanceof _ExistsError) {
                _this._$scope.folderExistsError = true;
              }
              return _this._isAddingFolder = false;
            }
          };
          this._$scope.$on('moveFeedToFolder', function(scope, data) {
            return _this._feedBusinessLayer.move(data.feedId, data.folderId);
          });
        }

        return FeedController;

      })();
      return new FeedController($scope, Persistence, FolderBusinessLayer, FeedBusinessLayer, SubscriptionsBusinessLayer, StarredBusinessLayer, unreadCountFormatter, ActiveFeed, FeedType, $window);
    }
  ]);

}).call(this);

// Generated by CoffeeScript 1.6.2
/*

ownCloud - News

@_author Bernhard Posselt
@copyright 2012 Bernhard Posselt nukeawhale@gmail.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
License as published by the Free Software Foundation; either
version 3 of the License, or any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU AFFERO GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU Affero General Public
License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  angular.module('News').controller('ItemController', [
    '$scope', 'ItemBusinessLayer', 'FeedModel', 'FeedLoading', 'FeedBusinessLayer', 'Language', 'AutoPageLoading', function($scope, ItemBusinessLayer, FeedModel, FeedLoading, FeedBusinessLayer, Language, AutoPageLoading) {
      var ItemController;

      ItemController = (function() {
        function ItemController(_$scope, _itemBusinessLayer, _feedModel, _feedLoading, _autoPageLoading, _feedBusinessLayer, _language) {
          var _this = this;

          this._$scope = _$scope;
          this._itemBusinessLayer = _itemBusinessLayer;
          this._feedModel = _feedModel;
          this._feedLoading = _feedLoading;
          this._autoPageLoading = _autoPageLoading;
          this._feedBusinessLayer = _feedBusinessLayer;
          this._language = _language;
          this._autoPaging = true;
          this._$scope.itemBusinessLayer = this._itemBusinessLayer;
          this._$scope.feedBusinessLayer = this._feedBusinessLayer;
          this._$scope.isLoading = function() {
            return _this._feedLoading.isLoading();
          };
          this._$scope.isAutoPaging = function() {
            return _this._autoPageLoading.isLoading();
          };
          this._$scope.getFeedTitle = function(feedId) {
            var feed;

            feed = _this._feedModel.getById(feedId);
            if (angular.isDefined(feed)) {
              return feed.title;
            } else {
              return '';
            }
          };
          this._$scope.getRelativeDate = function(date) {
            if (date) {
              return _this._language.getMomentFromTimestamp(date).fromNow();
            } else {
              return '';
            }
          };
          this._$scope.$on('readItem', function(scope, data) {
            return _this._itemBusinessLayer.setRead(data);
          });
          this._$scope.$on('autoPage', function() {
            if (_this._autoPaging) {
              _this._autoPaging = false;
              return _this._itemBusinessLayer.loadNext(function(data) {
                return _this._autoPaging = true;
              });
            }
          });
        }

        return ItemController;

      })();
      return new ItemController($scope, ItemBusinessLayer, FeedModel, FeedLoading, AutoPageLoading, FeedBusinessLayer, Language);
    }
  ]);

}).call(this);

// Generated by CoffeeScript 1.6.2
/*

ownCloud - News

@author Bernhard Posselt
@copyright 2012 Bernhard Posselt nukeawhale@gmail.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
License as published by the Free Software Foundation; either
version 3 of the License, or any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU AFFERO GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU Affero General Public
License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  angular.module('News').controller('SettingsController', [
    '$scope', 'FeedBusinessLayer', 'FolderBusinessLayer', 'ShowAll', function($scope, FeedBusinessLayer, FolderBusinessLayer, ShowAll) {
      var _this = this;

      $scope.feedBusinessLayer = FeedBusinessLayer;
      $scope["import"] = function(fileContent) {
        var error;

        $scope.error = false;
        ShowAll.setShowAll(true);
        try {
          return FolderBusinessLayer["import"](fileContent);
        } catch (_error) {
          error = _error;
          console.error(error);
          return $scope.error = true;
        }
      };
      return $scope.importGoogleReader = function(fileContent) {
        var error, parsedJSON;

        $scope.jsonError = false;
        ShowAll.setShowAll(true);
        try {
          parsedJSON = JSON.parse(fileContent);
          return FeedBusinessLayer.importGoogleReader(parsedJSON);
        } catch (_error) {
          error = _error;
          console.error(error);
          return $scope.jsonError = true;
        }
      };
    }
  ]);

}).call(this);

// Generated by CoffeeScript 1.6.2
/*

ownCloud - News

@author Bernhard Posselt
@copyright 2012 Bernhard Posselt nukeawhale@gmail.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
License as published by the Free Software Foundation; either
version 3 of the License, or any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU AFFERO GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU Affero General Public
License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  angular.module('News').factory('ActiveFeed', function() {
    var ActiveFeed;

    ActiveFeed = (function() {
      function ActiveFeed() {
        /*
        			Default value is all feeds
        */
        this._id = 0;
        this._type = 3;
      }

      ActiveFeed.prototype.handle = function(data) {
        this._id = data.id;
        return this._type = data.type;
      };

      ActiveFeed.prototype.getType = function() {
        return this._type;
      };

      ActiveFeed.prototype.getId = function() {
        return this._id;
      };

      return ActiveFeed;

    })();
    return new ActiveFeed();
  });

}).call(this);

// Generated by CoffeeScript 1.6.2
/*

ownCloud - News

@author Bernhard Posselt
@copyright 2012 Bernhard Posselt nukeawhale@gmail.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
License as published by the Free Software Foundation; either
version 3 of the License, or any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU AFFERO GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU Affero General Public
License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  angular.module('News').factory('_BusinessLayer', function() {
    var BusinessLayer;

    BusinessLayer = (function() {
      function BusinessLayer(_activeFeed, _persistence, _itemModel, _type) {
        this._activeFeed = _activeFeed;
        this._persistence = _persistence;
        this._itemModel = _itemModel;
        this._type = _type;
      }

      BusinessLayer.prototype.load = function(id) {
        this._itemModel.clear();
        this._persistence.getItems(this._type, id, 0);
        return this._activeFeed.handle({
          id: id,
          type: this._type
        });
      };

      BusinessLayer.prototype.isActive = function(id) {
        return this._activeFeed.getType() === this._type && this._activeFeed.getId() === id;
      };

      return BusinessLayer;

    })();
    return BusinessLayer;
  });

}).call(this);

// Generated by CoffeeScript 1.6.2
/*

ownCloud - News

@author Bernhard Posselt
@copyright 2012 Bernhard Posselt nukeawhale@gmail.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
License as published by the Free Software Foundation; either
version 3 of the License, or any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU AFFERO GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU Affero General Public
License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  angular.module('News').factory('FeedBusinessLayer', [
    '_BusinessLayer', 'ShowAll', 'Persistence', 'ActiveFeed', 'FeedType', 'ItemModel', 'FeedModel', 'NewLoading', '_ExistsError', 'Utils', '$rootScope', 'NewestItem', function(_BusinessLayer, ShowAll, Persistence, ActiveFeed, FeedType, ItemModel, FeedModel, NewLoading, _ExistsError, Utils, $rootScope, NewestItem) {
      var FeedBusinessLayer;

      FeedBusinessLayer = (function(_super) {
        __extends(FeedBusinessLayer, _super);

        function FeedBusinessLayer(_showAll, _feedModel, persistence, activeFeed, feedType, itemModel, _newLoading, _utils, _$rootScope, _newestItem) {
          this._showAll = _showAll;
          this._feedModel = _feedModel;
          this._newLoading = _newLoading;
          this._utils = _utils;
          this._$rootScope = _$rootScope;
          this._newestItem = _newestItem;
          FeedBusinessLayer.__super__.constructor.call(this, activeFeed, persistence, itemModel, feedType.Feed);
          this._feedType = feedType;
        }

        FeedBusinessLayer.prototype.getUnreadCount = function(feedId) {
          return this._feedModel.getFeedUnreadCount(feedId);
        };

        FeedBusinessLayer.prototype.getFeedsOfFolder = function(folderId) {
          return this._feedModel.getAllOfFolder(folderId);
        };

        FeedBusinessLayer.prototype.getFolderUnreadCount = function(folderId) {
          return this._feedModel.getFolderUnreadCount(folderId);
        };

        FeedBusinessLayer.prototype.getAllUnreadCount = function() {
          return this._feedModel.getUnreadCount();
        };

        FeedBusinessLayer.prototype["delete"] = function(feedId) {
          var data, feed,
            _this = this;

          feed = this._feedModel.removeById(feedId);
          data = {
            undoCallback: function() {
              _this._persistence.restoreFeed(feedId, function() {});
              return _this._persistence.getAllFeeds();
            },
            caption: feed.title
          };
          this._$rootScope.$broadcast('undoMessage', data);
          return this._persistence.deleteFeed(feedId);
        };

        FeedBusinessLayer.prototype.markRead = function(feedId) {
          var feed, item, newestItemId, _i, _len, _ref;

          feed = this._feedModel.getById(feedId);
          newestItemId = this._newestItem.getId();
          if (angular.isDefined(feed) && newestItemId !== 0) {
            feed.unreadCount = 0;
            _ref = this._itemModel.getAll();
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              item = _ref[_i];
              if (item.feedId === feed.id) {
                item.setRead();
              }
            }
            return this._persistence.setFeedRead(feedId, newestItemId);
          }
        };

        FeedBusinessLayer.prototype.getNumberOfFeeds = function() {
          return this._feedModel.size();
        };

        FeedBusinessLayer.prototype.isVisible = function(feedId) {
          if (this.isActive(feedId) || this._showAll.getShowAll()) {
            return true;
          } else {
            return this._feedModel.getFeedUnreadCount(feedId) > 0;
          }
        };

        FeedBusinessLayer.prototype.move = function(feedId, folderId) {
          var feed;

          feed = this._feedModel.getById(feedId);
          if (angular.isDefined(feed) && feed.folderId !== folderId) {
            this._feedModel.update({
              id: feedId,
              folderId: folderId,
              url: feed.url
            });
            return this._persistence.moveFeed(feedId, folderId);
          }
        };

        FeedBusinessLayer.prototype.setShowAll = function(showAll) {
          var callback,
            _this = this;

          this._showAll.setShowAll(showAll);
          callback = function() {
            _this._itemModel.clear();
            _this._newLoading.increase();
            return _this._persistence.getItems(_this._activeFeed.getType(), _this._activeFeed.getId(), 0, function() {
              return _this._newLoading.decrease();
            });
          };
          if (showAll) {
            return this._persistence.userSettingsReadShow(callback);
          } else {
            return this._persistence.userSettingsReadHide(callback);
          }
        };

        FeedBusinessLayer.prototype.isShowAll = function() {
          return this._showAll.getShowAll();
        };

        FeedBusinessLayer.prototype.getAll = function() {
          return this._feedModel.getAll();
        };

        FeedBusinessLayer.prototype.getFeedLink = function(feedId) {
          var feed;

          feed = this._feedModel.getById(feedId);
          if (angular.isDefined(feed)) {
            return feed.link;
          }
        };

        FeedBusinessLayer.prototype.create = function(url, parentId, onSuccess, onFailure) {
          var feed, success,
            _this = this;

          if (parentId == null) {
            parentId = 0;
          }
          if (onSuccess == null) {
            onSuccess = null;
          }
          if (onFailure == null) {
            onFailure = null;
          }
          onSuccess || (onSuccess = function() {});
          onFailure || (onFailure = function() {});
          parentId = parseInt(parentId, 10);
          if (angular.isUndefined(url) || url.trim() === '') {
            throw new Error('Url must not be empty');
          }
          url = url.trim();
          if (url.indexOf('http') !== 0) {
            url = 'http://' + url;
          }
          if (this._feedModel.getByUrl(url)) {
            throw new _ExistsError('Exists already');
          }
          feed = {
            title: url,
            url: url,
            folderId: parentId,
            unreadCount: 0,
            faviconLink: 'url(' + this._utils.imagePath('core', 'loading.gif') + ')'
          };
          this._feedModel.add(feed);
          success = function(response) {
            if (response.status === 'error') {
              feed.error = response.msg;
              return onFailure();
            } else {
              return onSuccess(response.data);
            }
          };
          return this._persistence.createFeed(url, parentId, success);
        };

        FeedBusinessLayer.prototype.markErrorRead = function(url) {
          return this._feedModel.removeByUrl(url);
        };

        FeedBusinessLayer.prototype.importGoogleReader = function(json) {
          var feed, onSuccess, url,
            _this = this;

          url = 'http://owncloud/googlereader';
          if (angular.isUndefined(this._feedModel.getByUrl(url))) {
            feed = {
              title: 'Google Reader',
              url: url,
              folderId: 0,
              unreadCount: 0,
              faviconLink: 'url(' + this._utils.imagePath('core', 'loading.gif') + ')'
            };
            this._feedModel.add(feed);
          }
          onSuccess = function(response) {
            var id;

            id = response.data.feeds[0].id;
            return _this.load(id);
          };
          return this._persistence.importGoogleReader(json, onSuccess);
        };

        return FeedBusinessLayer;

      })(_BusinessLayer);
      return new FeedBusinessLayer(ShowAll, FeedModel, Persistence, ActiveFeed, FeedType, ItemModel, NewLoading, Utils, $rootScope, NewestItem);
    }
  ]);

}).call(this);

// Generated by CoffeeScript 1.6.2
/*

ownCloud - News

@author Bernhard Posselt
@copyright 2012 Bernhard Posselt nukeawhale@gmail.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
License as published by the Free Software Foundation; either
version 3 of the License, or any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU AFFERO GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU Affero General Public
License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  angular.module('News').factory('FolderBusinessLayer', [
    '_BusinessLayer', 'FolderModel', 'FeedBusinessLayer', 'Persistence', 'FeedType', 'ActiveFeed', 'ItemModel', 'ShowAll', '_ExistsError', 'OPMLParser', 'NewestItem', 'FeedModel', '$rootScope', function(_BusinessLayer, FolderModel, FeedBusinessLayer, Persistence, FeedType, ActiveFeed, ItemModel, ShowAll, _ExistsError, OPMLParser, NewestItem, FeedModel, $rootScope) {
      var FolderBusinessLayer;

      FolderBusinessLayer = (function(_super) {
        __extends(FolderBusinessLayer, _super);

        function FolderBusinessLayer(_folderModel, _feedBusinessLayer, _showAll, activeFeed, persistence, _feedType, itemModel, _opmlParser, _newestItem, _feedModel, _$rootScope) {
          this._folderModel = _folderModel;
          this._feedBusinessLayer = _feedBusinessLayer;
          this._showAll = _showAll;
          this._feedType = _feedType;
          this._opmlParser = _opmlParser;
          this._newestItem = _newestItem;
          this._feedModel = _feedModel;
          this._$rootScope = _$rootScope;
          FolderBusinessLayer.__super__.constructor.call(this, activeFeed, persistence, itemModel, this._feedType.Folder);
        }

        FolderBusinessLayer.prototype.getById = function(folderId) {
          return this._folderModel.getById(folderId);
        };

        FolderBusinessLayer.prototype["delete"] = function(folderId) {
          var data, feed, feeds, folder, _i, _len, _ref,
            _this = this;

          feeds = [];
          _ref = this._feedBusinessLayer.getFeedsOfFolder(folderId);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            feed = _ref[_i];
            feeds.push(this._feedModel.removeById(feed.id));
          }
          folder = this._folderModel.removeById(folderId);
          data = {
            undoCallback: function() {
              return _this._persistence.restoreFolder(folderId, function() {
                _this._persistence.getAllFeeds();
                return _this._persistence.getAllFolders();
              });
            },
            caption: folder.name
          };
          this._$rootScope.$broadcast('undoMessage', data);
          return this._persistence.deleteFolder(folderId);
        };

        FolderBusinessLayer.prototype.hasFeeds = function(folderId) {
          return this._feedBusinessLayer.getFeedsOfFolder(folderId).length;
        };

        FolderBusinessLayer.prototype.open = function(folderId) {
          var folder;

          folder = this._folderModel.getById(folderId);
          if (angular.isDefined(folder)) {
            if (!folder.opened) {
              folder.opened = true;
              return this._persistence.openFolder(folder.id);
            }
          }
        };

        FolderBusinessLayer.prototype.toggleFolder = function(folderId) {
          var folder;

          folder = this._folderModel.getById(folderId);
          if (angular.isDefined(folder)) {
            folder.opened = !folder.opened;
            if (folder.opened) {
              return this._persistence.openFolder(folder.id);
            } else {
              return this._persistence.collapseFolder(folder.id);
            }
          }
        };

        FolderBusinessLayer.prototype.markRead = function(folderId) {
          var feed, folder, item, newestItemId, _i, _j, _len, _len1, _ref, _ref1;

          newestItemId = this._newestItem.getId();
          folder = this._folderModel.getById(folderId);
          if (newestItemId !== 0 && angular.isDefined(folder)) {
            _ref = this._feedBusinessLayer.getFeedsOfFolder(folderId);
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              feed = _ref[_i];
              feed.unreadCount = 0;
              _ref1 = this._itemModel.getAll();
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                item = _ref1[_j];
                if (item.feedId === feed.id) {
                  item.setRead();
                }
              }
            }
            return this._persistence.setFolderRead(folderId, newestItemId);
          }
        };

        FolderBusinessLayer.prototype.getUnreadCount = function(folderId) {
          return this._feedBusinessLayer.getFolderUnreadCount(folderId);
        };

        FolderBusinessLayer.prototype.isVisible = function(folderId) {
          var feed, _i, _len, _ref;

          if (this._showAll.getShowAll()) {
            return true;
          } else {
            if (this.isActive(folderId) || this._feedBusinessLayer.getFolderUnreadCount(folderId) > 0) {
              return true;
            }
            if (this._activeFeed.getType() === this._feedType.Feed) {
              _ref = this._feedBusinessLayer.getFeedsOfFolder(folderId);
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                feed = _ref[_i];
                if (feed.id === this._activeFeed.getId()) {
                  return true;
                }
              }
            }
            return false;
          }
        };

        FolderBusinessLayer.prototype.getAll = function() {
          return this._folderModel.getAll();
        };

        FolderBusinessLayer.prototype.create = function(folderName, onSuccess, onFailure) {
          var folder, success,
            _this = this;

          if (onSuccess == null) {
            onSuccess = null;
          }
          if (onFailure == null) {
            onFailure = null;
          }
          onSuccess || (onSuccess = function() {});
          onFailure || (onFailure = function() {});
          if (angular.isUndefined(folderName) || folderName.trim() === '') {
            throw new Error('Folder name must not be empty');
          }
          folderName = folderName.trim();
          if (this._folderModel.getByName(folderName)) {
            throw new _ExistsError('Exists already');
          }
          folder = {
            name: folderName,
            opened: true
          };
          this._folderModel.add(folder);
          success = function(response) {
            if (response.status === 'error') {
              folder.error = response.msg;
              return onFailure();
            } else {
              return onSuccess(response.data);
            }
          };
          return this._persistence.createFolder(folderName, 0, success);
        };

        FolderBusinessLayer.prototype.markErrorRead = function(folderName) {
          return this._folderModel.removeByName(folderName);
        };

        FolderBusinessLayer.prototype["import"] = function(xml) {
          var opml;

          opml = this._opmlParser.parseXML(xml);
          return this._importElement(opml, 0);
        };

        FolderBusinessLayer.prototype._importElement = function(opml, parentFolderId) {
          var item, _i, _len, _ref, _results,
            _this = this;

          _ref = opml.getItems();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            _results.push((function(item) {
              var error, folder;

              if (item.isFolder()) {
                try {
                  return _this.create(item.getName(), function(data) {
                    return _this._importElement(item, data.folders[0].id);
                  });
                } catch (_error) {
                  error = _error;
                  if (error instanceof _ExistsError) {
                    folder = _this._folderModel.getByName(item.getName());
                    _this.open(folder.id);
                    return _this._importElement(item, folder.id);
                  } else {
                    return console.info(error);
                  }
                }
              } else {
                try {
                  return _this._feedBusinessLayer.create(item.getUrl(), parentFolderId);
                } catch (_error) {
                  error = _error;
                  if (!error instanceof _ExistsError) {
                    return console.info(error);
                  }
                }
              }
            })(item));
          }
          return _results;
        };

        return FolderBusinessLayer;

      })(_BusinessLayer);
      return new FolderBusinessLayer(FolderModel, FeedBusinessLayer, ShowAll, ActiveFeed, Persistence, FeedType, ItemModel, OPMLParser, NewestItem, FeedModel, $rootScope);
    }
  ]);

}).call(this);

// Generated by CoffeeScript 1.6.2
/*

ownCloud - News

@author Bernhard Posselt
@copyright 2012 Bernhard Posselt nukeawhale@gmail.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
License as published by the Free Software Foundation; either
version 3 of the License, or any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU AFFERO GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU Affero General Public
License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  angular.module('News').factory('ItemBusinessLayer', [
    'ItemModel', 'FeedModel', 'Persistence', 'ActiveFeed', 'FeedType', 'StarredBusinessLayer', 'NewestItem', function(ItemModel, FeedModel, Persistence, ActiveFeed, FeedType, StarredBusinessLayer, NewestItem) {
      var ItemBusinessLayer;

      ItemBusinessLayer = (function() {
        function ItemBusinessLayer(_itemModel, _feedModel, _persistence, _activeFeed, _feedType, _starredBusinessLayer, _newestItem) {
          this._itemModel = _itemModel;
          this._feedModel = _feedModel;
          this._persistence = _persistence;
          this._activeFeed = _activeFeed;
          this._feedType = _feedType;
          this._starredBusinessLayer = _starredBusinessLayer;
          this._newestItem = _newestItem;
        }

        ItemBusinessLayer.prototype.getAll = function() {
          return this._itemModel.getAll();
        };

        ItemBusinessLayer.prototype.noFeedActive = function() {
          return this._activeFeed.getType() !== this._feedType.Feed;
        };

        ItemBusinessLayer.prototype.isKeptUnread = function(itemId) {
          var item;

          item = this._itemModel.getById(itemId);
          if (angular.isDefined(item) && angular.isDefined(item.keptUnread)) {
            return item.keptUnread;
          }
          return false;
        };

        ItemBusinessLayer.prototype.toggleKeepUnread = function(itemId) {
          var item;

          item = this._itemModel.getById(itemId);
          if (angular.isDefined(item) && !item.keptUnread) {
            item.keptUnread = true;
            if (item.isRead()) {
              return this.setUnread(itemId);
            }
          } else {
            return item.keptUnread = false;
          }
        };

        ItemBusinessLayer.prototype.toggleStarred = function(itemId) {
          var item;

          item = this._itemModel.getById(itemId);
          if (item.isStarred()) {
            item.setUnstarred();
            this._starredBusinessLayer.decreaseCount();
            return this._persistence.unstarItem(item.feedId, item.guidHash);
          } else {
            item.setStarred();
            this._starredBusinessLayer.increaseCount();
            return this._persistence.starItem(item.feedId, item.guidHash);
          }
        };

        ItemBusinessLayer.prototype.setRead = function(itemId) {
          var feed, item, keptUnread;

          item = this._itemModel.getById(itemId);
          if (angular.isDefined(item)) {
            keptUnread = angular.isDefined(item.keptUnread) && item.keptUnread;
            if (!(item.isRead() || keptUnread)) {
              item.setRead();
              this._persistence.readItem(itemId);
              feed = this._feedModel.getById(item.feedId);
              if (angular.isDefined(feed)) {
                return feed.unreadCount -= 1;
              }
            }
          }
        };

        ItemBusinessLayer.prototype.setUnread = function(itemId) {
          var feed, item;

          item = this._itemModel.getById(itemId);
          if (angular.isDefined(item)) {
            if (item.isRead()) {
              item.setUnread();
              this._persistence.unreadItem(itemId);
              feed = this._feedModel.getById(item.feedId);
              if (angular.isDefined(feed)) {
                return feed.unreadCount += 1;
              }
            }
          }
        };

        ItemBusinessLayer.prototype.getFeedTitle = function(itemId) {
          var feed, item;

          item = this._itemModel.getById(itemId);
          if (angular.isDefined(item)) {
            feed = this._feedModel.getById(item.feedId);
            if (angular.isDefined(feed)) {
              return feed.title;
            }
          }
        };

        ItemBusinessLayer.prototype.loadNext = function(callback) {
          var lowestItemId;

          lowestItemId = this._itemModel.getLowestId();
          if (lowestItemId !== 0) {
            return this._persistence.getItems(this._activeFeed.getType(), this._activeFeed.getId(), lowestItemId, callback);
          } else {
            return callback();
          }
        };

        ItemBusinessLayer.prototype.loadNew = function() {};

        return ItemBusinessLayer;

      })();
      return new ItemBusinessLayer(ItemModel, FeedModel, Persistence, ActiveFeed, FeedType, StarredBusinessLayer, NewestItem);
    }
  ]);

}).call(this);

// Generated by CoffeeScript 1.6.2
/*

ownCloud - News

@author Bernhard Posselt
@copyright 2012 Bernhard Posselt nukeawhale@gmail.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
License as published by the Free Software Foundation; either
version 3 of the License, or any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU AFFERO GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU Affero General Public
License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  angular.module('News').factory('StarredBusinessLayer', [
    '_BusinessLayer', 'StarredCount', 'Persistence', 'ActiveFeed', 'FeedType', 'ItemModel', function(_BusinessLayer, StarredCount, Persistence, ActiveFeed, FeedType, ItemModel) {
      var StarredBusinessLayer;

      StarredBusinessLayer = (function(_super) {
        __extends(StarredBusinessLayer, _super);

        function StarredBusinessLayer(_starredCount, feedType, persistence, activeFeed, itemModel) {
          this._starredCount = _starredCount;
          StarredBusinessLayer.__super__.constructor.call(this, activeFeed, persistence, itemModel, feedType.Starred);
        }

        StarredBusinessLayer.prototype.isVisible = function() {
          if (this.isActive(0)) {
            return true;
          } else {
            return this._starredCount.getStarredCount() > 0;
          }
        };

        StarredBusinessLayer.prototype.getUnreadCount = function() {
          return this._starredCount.getStarredCount();
        };

        StarredBusinessLayer.prototype.increaseCount = function() {
          return this._starredCount.setStarredCount(this._starredCount.getStarredCount() + 1);
        };

        StarredBusinessLayer.prototype.decreaseCount = function() {
          return this._starredCount.setStarredCount(this._starredCount.getStarredCount() - 1);
        };

        return StarredBusinessLayer;

      })(_BusinessLayer);
      return new StarredBusinessLayer(StarredCount, FeedType, Persistence, ActiveFeed, ItemModel);
    }
  ]);

}).call(this);

// Generated by CoffeeScript 1.6.2
/*

ownCloud - News

@author Bernhard Posselt
@copyright 2012 Bernhard Posselt nukeawhale@gmail.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
License as published by the Free Software Foundation; either
version 3 of the License, or any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU AFFERO GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU Affero General Public
License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  angular.module('News').factory('SubscriptionsBusinessLayer', [
    '_BusinessLayer', 'FeedBusinessLayer', 'Persistence', 'ShowAll', 'ActiveFeed', 'FeedType', 'ItemModel', 'FeedModel', 'NewestItem', function(_BusinessLayer, FeedBusinessLayer, Persistence, ShowAll, ActiveFeed, FeedType, ItemModel, FeedModel, NewestItem) {
      var SubscriptionsBusinessLayer;

      SubscriptionsBusinessLayer = (function(_super) {
        __extends(SubscriptionsBusinessLayer, _super);

        function SubscriptionsBusinessLayer(_feedBusinessLayer, _showAll, feedType, persistence, activeFeed, itemModel, _feedModel, _newestItem) {
          this._feedBusinessLayer = _feedBusinessLayer;
          this._showAll = _showAll;
          this._feedModel = _feedModel;
          this._newestItem = _newestItem;
          SubscriptionsBusinessLayer.__super__.constructor.call(this, activeFeed, persistence, itemModel, feedType.Subscriptions);
        }

        SubscriptionsBusinessLayer.prototype.isVisible = function() {
          var visible;

          if (this.isActive(0) && this._feedBusinessLayer.getNumberOfFeeds() > 0) {
            return true;
          }
          if (this._showAll.getShowAll()) {
            return this._feedBusinessLayer.getNumberOfFeeds() > 0;
          } else {
            visible = this._feedBusinessLayer.getNumberOfFeeds() > 0 && this._feedBusinessLayer.getAllUnreadCount() > 0;
            return visible;
          }
        };

        SubscriptionsBusinessLayer.prototype.markRead = function() {
          var feed, item, newestItemId, _i, _j, _len, _len1, _ref, _ref1;

          newestItemId = this._newestItem.getId();
          if (newestItemId !== 0) {
            _ref = this._feedModel.getAll();
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              feed = _ref[_i];
              feed.unreadCount = 0;
            }
            _ref1 = this._itemModel.getAll();
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              item = _ref1[_j];
              item.setRead();
            }
            return this._persistence.setAllRead(newestItemId);
          }
        };

        SubscriptionsBusinessLayer.prototype.getUnreadCount = function() {
          return this._feedBusinessLayer.getAllUnreadCount();
        };

        return SubscriptionsBusinessLayer;

      })(_BusinessLayer);
      return new SubscriptionsBusinessLayer(FeedBusinessLayer, ShowAll, FeedType, Persistence, ActiveFeed, ItemModel, FeedModel, NewestItem);
    }
  ]);

}).call(this);

// Generated by CoffeeScript 1.6.2
/*

ownCloud - News

@author Bernhard Posselt
@copyright 2012 Bernhard Posselt nukeawhale@gmail.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
License as published by the Free Software Foundation; either
version 3 of the License, or any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU AFFERO GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU Affero General Public
License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  angular.module('News').factory('_ExistsError', function() {
    var ExistsError;

    ExistsError = (function() {
      function ExistsError(message) {
        this.message = message;
      }

      return ExistsError;

    })();
    return ExistsError;
  });

}).call(this);

// Generated by CoffeeScript 1.6.2
/*

ownCloud - News

@author Bernhard Posselt
@copyright 2012 Bernhard Posselt nukeawhale@gmail.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
License as published by the Free Software Foundation; either
version 3 of the License, or any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU AFFERO GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU Affero General Public
License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  angular.module('News').factory('FeedType', function() {
    var feedType;

    return feedType = {
      Feed: 0,
      Folder: 1,
      Starred: 2,
      Subscriptions: 3,
      Shared: 4
    };
  });

}).call(this);

// Generated by CoffeeScript 1.6.2
/*

ownCloud - News

@author Bernhard Posselt
@copyright 2012 Bernhard Posselt nukeawhale@gmail.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
License as published by the Free Software Foundation; either
version 3 of the License, or any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU AFFERO GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU Affero General Public
License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  angular.module('News').factory('Language', function() {
    var Language;

    Language = (function() {
      function Language() {
        this._language = 'en';
        this._langs = ['ar-ma', 'ar', 'bg', 'ca', 'cs', 'cv', 'da', 'de', 'el', 'en-ca', 'en-gb', 'eo', 'es', 'et', 'eu', 'fi', 'fr-ca', 'fr', 'gl', 'he', 'hi', 'hu', 'id', 'is', 'it', 'ja', 'ka', 'ko', 'lv', 'ms-my', 'nb', 'ne', 'nl', 'pl', 'pt-br', 'pt', 'ro', 'ru', 'sk', 'sl', 'sv', 'th', 'tr', 'tzm-la', 'tzm', 'uk', 'zh-cn', 'zh-tw'];
      }

      Language.prototype.handle = function(data) {
        data = data.replace('_', '-').toLowerCase();
        if (!(__indexOf.call(this._langs, data) >= 0)) {
          data = data.split('-')[0];
        }
        if (!(__indexOf.call(this._langs, data) >= 0)) {
          data = 'en';
        }
        return this._language = data;
      };

      Language.prototype.getLanguage = function() {
        return this._language;
      };

      Language.prototype.getMomentFromTimestamp = function(timestamp) {
        return moment.unix(timestamp).lang(this._language);
      };

      return Language;

    })();
    return new Language();
  });

}).call(this);

// Generated by CoffeeScript 1.6.2
/*

ownCloud - News

@author Bernhard Posselt
@copyright 2012 Bernhard Posselt nukeawhale@gmail.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
License as published by the Free Software Foundation; either
version 3 of the License, or any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU AFFERO GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU Affero General Public
License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  angular.module('News').factory('FeedModel', [
    '_Model', '_EqualQuery', 'Utils', function(_Model, _EqualQuery, Utils) {
      var FeedModel;

      FeedModel = (function(_super) {
        __extends(FeedModel, _super);

        function FeedModel(_utils) {
          this._utils = _utils;
          this._url = {};
          FeedModel.__super__.constructor.call(this);
        }

        FeedModel.prototype.clear = function() {
          this._url = {};
          return FeedModel.__super__.clear.call(this);
        };

        FeedModel.prototype.add = function(data, clearCache) {
          var item, updateById, updateByUrl;

          if (clearCache == null) {
            clearCache = true;
          }
          if (data.faviconLink === null) {
            data.faviconLink = 'url(' + this._utils.imagePath('news', 'rss.svg') + ')';
          } else if (angular.isDefined(data.faviconLink) && data.faviconLink.indexOf('url(') !== 0) {
            data.faviconLink = 'url(' + data.faviconLink + ')';
          }
          /*
          			We want to add a feed on the client side before
          			we have an id from the server. Once the server returns
          			an id, we have to update the existing item without id
          */

          item = this._url[data.url];
          updateById = angular.isDefined(data.id) && angular.isDefined(this.getById(data.id));
          updateByUrl = angular.isDefined(item) && angular.isUndefined(item.id);
          if (updateById || updateByUrl) {
            return this.update(data, clearCache);
          } else {
            if (angular.isDefined(data.url)) {
              this._url[data.url] = data;
              if (angular.isDefined(data.id)) {
                return FeedModel.__super__.add.call(this, data, clearCache);
              } else {
                this._data.push(data);
                if (clearCache) {
                  return this._invalidateCache();
                }
              }
            }
          }
        };

        FeedModel.prototype.update = function(data, clearCache) {
          var item, itemWithId;

          if (clearCache == null) {
            clearCache = true;
          }
          if (angular.isDefined(data.url)) {
            item = this._url[data.url];
          }
          if (angular.isUndefined(data.id) && angular.isDefined(item)) {
            return angular.extend(item, data);
          } else {
            if (angular.isDefined(data.id) && angular.isDefined(item) && angular.isUndefined(item.id)) {
              item.id = data.id;
              this._dataMap[data.id] = item;
            }
            itemWithId = this.getById(data.id);
            if (angular.isDefined(itemWithId) && itemWithId.url !== data.url) {
              delete this._url[itemWithId.url];
              this._url[data.url] = itemWithId;
            }
            return FeedModel.__super__.update.call(this, data, clearCache);
          }
        };

        FeedModel.prototype.removeById = function(id) {
          var item;

          item = this.getById(id);
          delete this._url[item.url];
          return FeedModel.__super__.removeById.call(this, id);
        };

        FeedModel.prototype.getByUrl = function(url) {
          return this._url[url];
        };

        FeedModel.prototype.getUnreadCount = function() {
          var count, feed, _i, _len, _ref;

          count = 0;
          _ref = this.getAll();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            feed = _ref[_i];
            count += feed.unreadCount;
          }
          return count;
        };

        FeedModel.prototype.getFeedUnreadCount = function(feedId) {
          var count, feed;

          feed = this.getById(feedId);
          count = 0;
          if (angular.isDefined(feed)) {
            return count += feed.unreadCount;
          } else {
            return 0;
          }
        };

        FeedModel.prototype.getFolderUnreadCount = function(folderId) {
          var count, feed, query, _i, _len, _ref;

          query = new _EqualQuery('folderId', parseInt(folderId));
          count = 0;
          _ref = this.get(query);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            feed = _ref[_i];
            count += feed.unreadCount;
          }
          return count;
        };

        FeedModel.prototype.getAllOfFolder = function(folderId) {
          var query;

          query = new _EqualQuery('folderId', parseInt(folderId));
          return this.get(query);
        };

        FeedModel.prototype.removeByUrl = function(url, clearCache) {
          var counter, entry, key, value, _i, _len, _ref, _ref1, _results;

          if (clearCache == null) {
            clearCache = true;
          }
          /*
          			Remove an entry by id
          */

          _ref = this._dataMap;
          for (key in _ref) {
            value = _ref[key];
            if (this._dataMap[key].url === url) {
              delete this._dataMap[key];
              break;
            }
          }
          _ref1 = this._data;
          _results = [];
          for (counter = _i = 0, _len = _ref1.length; _i < _len; counter = ++_i) {
            entry = _ref1[counter];
            if (entry.url === url) {
              this._data.splice(counter, 1);
              delete this._url[url];
              if (clearCache) {
                this._invalidateCache();
              }
              break;
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };

        return FeedModel;

      })(_Model);
      return new FeedModel(Utils);
    }
  ]);

}).call(this);

// Generated by CoffeeScript 1.6.2
/*

ownCloud - News

@author Bernhard Posselt
@copyright 2012 Bernhard Posselt nukeawhale@gmail.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
License as published by the Free Software Foundation; either
version 3 of the License, or any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU AFFERO GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU Affero General Public
License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  angular.module('News').factory('FolderModel', [
    '_Model', '_EqualQuery', function(_Model, _EqualQuery) {
      var FolderModel;

      FolderModel = (function(_super) {
        __extends(FolderModel, _super);

        function FolderModel() {
          this._nameCache = {};
          FolderModel.__super__.constructor.call(this);
        }

        FolderModel.prototype.add = function(data, clearCache) {
          var item, updateById, updateByName;

          if (clearCache == null) {
            clearCache = true;
          }
          /*
          			We want to add a folder on the client side before
          			we have an id from the server. Once the server returns
          			an id, we have to update the existing item without id
          */

          data.name = this._transformName(data.name);
          item = this._nameCache[data.name];
          updateById = angular.isDefined(data.id) && angular.isDefined(this.getById(data.id));
          updateByName = angular.isDefined(item) && angular.isUndefined(item.id);
          if (updateById || updateByName) {
            return this.update(data, clearCache);
          } else {
            this._nameCache[data.name] = data;
            if (angular.isDefined(data.id)) {
              return FolderModel.__super__.add.call(this, data, clearCache);
            } else {
              this._data.push(data);
              if (clearCache) {
                return this._invalidateCache();
              }
            }
          }
        };

        FolderModel.prototype.update = function(data, clearCache) {
          var item, itemWithId;

          if (clearCache == null) {
            clearCache = true;
          }
          data.name = this._transformName(data.name);
          item = this._nameCache[data.name];
          if (angular.isUndefined(data.id) && angular.isDefined(item)) {
            return angular.extend(item, data);
          } else {
            if (angular.isDefined(data.id) && angular.isDefined(item) && angular.isUndefined(item.id)) {
              item.id = data.id;
              this._dataMap[data.id] = item;
            }
            itemWithId = this.getById(data.id);
            if (angular.isDefined(itemWithId) && itemWithId.name !== data.name) {
              delete this._nameCache[itemWithId.name];
              this._nameCache[data.name] = itemWithId;
            }
            return FolderModel.__super__.update.call(this, data, clearCache);
          }
        };

        FolderModel.prototype.getByName = function(folderName) {
          folderName = this._transformName(folderName);
          return this._nameCache[folderName];
        };

        FolderModel.prototype.clear = function() {
          this._nameCache = {};
          return FolderModel.__super__.clear.call(this);
        };

        FolderModel.prototype.removeById = function(id, clearCache) {
          var item;

          if (clearCache == null) {
            clearCache = true;
          }
          item = this.getById(id);
          delete this._nameCache[this._transformName(item.name)];
          return FolderModel.__super__.removeById.call(this, id, clearCache);
        };

        FolderModel.prototype._transformName = function(folderName) {
          return folderName.trim().toLowerCase();
        };

        FolderModel.prototype.removeByName = function(name, clearCache) {
          var counter, entry, key, value, _i, _len, _ref, _ref1, _results;

          if (clearCache == null) {
            clearCache = true;
          }
          /*
          			Remove an entry by id
          */

          name = name.toLowerCase();
          _ref = this._dataMap;
          for (key in _ref) {
            value = _ref[key];
            if (this._dataMap[key].name === name) {
              delete this._dataMap[key];
              break;
            }
          }
          _ref1 = this._data;
          _results = [];
          for (counter = _i = 0, _len = _ref1.length; _i < _len; counter = ++_i) {
            entry = _ref1[counter];
            if (entry.name === name) {
              this._data.splice(counter, 1);
              delete this._nameCache[name];
              if (clearCache) {
                this._invalidateCache();
              }
              break;
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };

        return FolderModel;

      })(_Model);
      return new FolderModel();
    }
  ]);

}).call(this);

// Generated by CoffeeScript 1.6.2
/*

ownCloud - News

@author Bernhard Posselt
@copyright 2012 Bernhard Posselt nukeawhale@gmail.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
License as published by the Free Software Foundation; either
version 3 of the License, or any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU AFFERO GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU Affero General Public
License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  angular.module('News').factory('ItemModel', [
    '_Model', '_MinimumQuery', 'StatusFlag', function(_Model, _MinimumQuery, StatusFlag) {
      var ItemModel;

      ItemModel = (function(_super) {
        __extends(ItemModel, _super);

        function ItemModel() {
          this._guidFeedIdHash = {};
          ItemModel.__super__.constructor.call(this);
        }

        ItemModel.prototype.clear = function() {
          this._guidFeedIdHash = {};
          return ItemModel.__super__.clear.call(this);
        };

        ItemModel.prototype.add = function(data, clearCache) {
          var entry, hash;

          if (clearCache == null) {
            clearCache = true;
          }
          this._bindMethods(data);
          hash = data.feedId + '_' + data.guidHash;
          entry = this._guidFeedIdHash[hash];
          if (angular.isDefined(entry)) {
            return this.update(data, clearCache);
          } else {
            this._guidFeedIdHash[hash] = data;
            return ItemModel.__super__.add.call(this, data, clearCache);
          }
        };

        ItemModel.prototype._bindMethods = function(data) {
          data.isRead = function() {
            return !((this.status & StatusFlag.UNREAD) === StatusFlag.UNREAD);
          };
          data.setRead = function() {
            return this.status &= ~StatusFlag.UNREAD;
          };
          data.setUnread = function() {
            return this.status |= StatusFlag.UNREAD;
          };
          data.isStarred = function() {
            return (this.status & StatusFlag.STARRED) === StatusFlag.STARRED;
          };
          data.setStarred = function() {
            return this.status |= StatusFlag.STARRED;
          };
          return data.setUnstarred = function() {
            return this.status &= ~StatusFlag.STARRED;
          };
        };

        ItemModel.prototype.update = function(data, clearCache) {
          var entry, hash, key, value;

          if (clearCache == null) {
            clearCache = true;
          }
          hash = data.feedId + '_' + data.guidHash;
          entry = this._guidFeedIdHash[hash];
          delete this._dataMap[entry.id];
          this._dataMap[data.id] = entry;
          for (key in data) {
            value = data[key];
            if (key === 'feedId' || key === 'guidHash') {
              continue;
            } else {
              entry[key] = value;
            }
          }
          return ItemModel.__super__.update.call(this, entry, clearCache);
        };

        ItemModel.prototype.getByGuidHashAndFeedId = function(guidHash, feedId) {
          var hash;

          hash = feedId + '_' + guidHash;
          return this._guidFeedIdHash[hash];
        };

        ItemModel.prototype.removeById = function(id) {
          var hash, item;

          item = this.getById(id);
          hash = item.feedId + '_' + item.guidHash;
          delete this._guidFeedIdHash[hash];
          return ItemModel.__super__.removeById.call(this, id);
        };

        ItemModel.prototype.getLowestId = function() {
          var lowestId, query;

          query = new _MinimumQuery('id');
          lowestId = this.get(query);
          if (angular.isDefined(lowestId)) {
            return lowestId.id;
          } else {
            return 0;
          }
        };

        return ItemModel;

      })(_Model);
      return new ItemModel();
    }
  ]);

}).call(this);

// Generated by CoffeeScript 1.6.2
/*

ownCloud - News

@author Bernhard Posselt
@copyright 2012 Bernhard Posselt nukeawhale@gmail.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
License as published by the Free Software Foundation; either
version 3 of the License, or any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU AFFERO GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU Affero General Public
License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  angular.module('News').factory('NewestItem', function() {
    var NewestItem;

    NewestItem = (function() {
      function NewestItem() {
        this._id = 0;
      }

      NewestItem.prototype.handle = function(data) {
        return this._id = data;
      };

      NewestItem.prototype.getId = function() {
        return this._id;
      };

      return NewestItem;

    })();
    return new NewestItem();
  });

}).call(this);

// Generated by CoffeeScript 1.6.2
/*

ownCloud - News

@author Bernhard Posselt
@copyright 2012 Bernhard Posselt nukeawhale@gmail.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
License as published by the Free Software Foundation; either
version 3 of the License, or any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU AFFERO GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU Affero General Public
License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  angular.module('News').factory('OPMLParser', function() {
    var Feed, Folder, OPMLParser;

    Feed = (function() {
      function Feed(_name, _url) {
        this._name = _name;
        this._url = _url;
      }

      Feed.prototype.getName = function() {
        return this._name;
      };

      Feed.prototype.getUrl = function() {
        return this._url;
      };

      Feed.prototype.isFolder = function() {
        return false;
      };

      return Feed;

    })();
    Folder = (function() {
      function Folder(_name) {
        this._name = _name;
        this._items = [];
      }

      Folder.prototype.add = function(feed) {
        return this._items.push(feed);
      };

      Folder.prototype.getItems = function() {
        return this._items;
      };

      Folder.prototype.getName = function() {
        return this._name;
      };

      Folder.prototype.isFolder = function() {
        return true;
      };

      return Folder;

    })();
    OPMLParser = (function() {
      function OPMLParser() {}

      OPMLParser.prototype.parseXML = function(xml) {
        var $root, $xml, structure;

        $xml = $($.parseXML(xml));
        $root = $xml.find('body');
        structure = new Folder('root');
        this._recursivelyParse($root, structure);
        return structure;
      };

      OPMLParser.prototype._recursivelyParse = function($xml, structure) {
        var $outline, feed, folder, outline, _i, _len, _ref, _results;

        _ref = $xml.children('outline');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          outline = _ref[_i];
          $outline = $(outline);
          if (angular.isDefined($outline.attr('xmlUrl'))) {
            feed = new Feed($outline.attr('text'), $outline.attr('xmlUrl'));
            _results.push(structure.add(feed));
          } else {
            folder = new Folder($outline.attr('text'));
            structure.add(folder);
            _results.push(this._recursivelyParse($outline, folder));
          }
        }
        return _results;
      };

      return OPMLParser;

    })();
    return new OPMLParser();
  });

}).call(this);

// Generated by CoffeeScript 1.6.2
/*

ownCloud - News

@author Bernhard Posselt
@copyright 2012 Bernhard Posselt nukeawhale@gmail.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
License as published by the Free Software Foundation; either
version 3 of the License, or any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU AFFERO GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU Affero General Public
License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  angular.module('News').factory('Persistence', [
    'Request', 'FeedLoading', 'AutoPageLoading', 'NewLoading', 'Config', 'ActiveFeed', '$rootScope', function(Request, FeedLoading, AutoPageLoading, NewLoading, Config, ActiveFeed, $rootScope) {
      var Persistence;

      Persistence = (function() {
        function Persistence(_request, _feedLoading, _autoPageLoading, _newLoading, _config, _activeFeed, _$rootScope) {
          this._request = _request;
          this._feedLoading = _feedLoading;
          this._autoPageLoading = _autoPageLoading;
          this._newLoading = _newLoading;
          this._config = _config;
          this._activeFeed = _activeFeed;
          this._$rootScope = _$rootScope;
        }

        Persistence.prototype.init = function() {
          /*
          			Loads the initial data from the server
          */

          var _this = this;

          this.getActiveFeed(function() {
            return _this.getItems(_this._activeFeed.getType(), _this._activeFeed.getId());
          });
          this.getAllFolders();
          this.getAllFeeds();
          this.userSettingsRead();
          return this.userSettingsLanguage();
        };

        /*
        			ITEM CONTROLLER
        */


        Persistence.prototype.getItems = function(type, id, offset, onSuccess) {
          var failureCallbackWrapper, loading, params, successCallbackWrapper,
            _this = this;

          if (onSuccess == null) {
            onSuccess = null;
          }
          onSuccess || (onSuccess = function() {});
          if (offset === 0) {
            loading = this._feedLoading;
          } else {
            loading = this._autoPageLoading;
          }
          loading.increase();
          successCallbackWrapper = function(data) {
            onSuccess(data);
            return loading.decrease();
          };
          failureCallbackWrapper = function(data) {
            return loading.decrease();
          };
          params = {
            data: {
              limit: this._config.itemBatchSize,
              offset: offset,
              id: id,
              type: type
            },
            onSuccess: successCallbackWrapper,
            onFailure: failureCallbackWrapper
          };
          return this._request.get('news_items', params);
        };

        Persistence.prototype.starItem = function(feedId, guidHash) {
          /*
          			Stars an item
          */

          var params;

          params = {
            routeParams: {
              feedId: feedId,
              guidHash: guidHash
            }
          };
          return this._request.post('news_items_star', params);
        };

        Persistence.prototype.unstarItem = function(feedId, guidHash) {
          /*
          			Unstars an item
          */

          var params;

          params = {
            routeParams: {
              feedId: feedId,
              guidHash: guidHash
            }
          };
          return this._request.post('news_items_unstar', params);
        };

        Persistence.prototype.readItem = function(itemId) {
          /*
          			Sets an item as read
          */

          var params;

          params = {
            routeParams: {
              itemId: itemId
            }
          };
          return this._request.post('news_items_read', params);
        };

        Persistence.prototype.unreadItem = function(itemId) {
          /*
          			Sets an item as unread
          */

          var params;

          params = {
            routeParams: {
              itemId: itemId
            }
          };
          return this._request.post('news_items_unread', params);
        };

        Persistence.prototype.setAllRead = function(highestItemId) {
          /*
          			sets all items as read
          */

          var params;

          params = {
            data: {
              highestItemId: highestItemId
            }
          };
          return this._request.post('news_items_all_read', params);
        };

        /*
        			FEED CONTROLLER
        */


        Persistence.prototype.getAllFeeds = function(onSuccess, showLoading) {
          var failureCallbackWrapper, params, successCallbackWrapper,
            _this = this;

          if (showLoading == null) {
            showLoading = true;
          }
          onSuccess || (onSuccess = function() {});
          if (showLoading) {
            this._feedLoading.increase();
            successCallbackWrapper = function(data) {
              onSuccess();
              return _this._feedLoading.decrease();
            };
            failureCallbackWrapper = function(data) {
              return _this._feedLoading.decrease();
            };
          } else {
            successCallbackWrapper = function(data) {
              return onSuccess();
            };
            failureCallbackWrapper = function(data) {};
          }
          params = {
            onSuccess: successCallbackWrapper,
            onFailure: failureCallbackWrapper
          };
          return this._request.get('news_feeds', params);
        };

        Persistence.prototype.getActiveFeed = function(onSuccess) {
          var failureCallbackWrapper, params, successCallbackWrapper,
            _this = this;

          this._feedLoading.increase();
          successCallbackWrapper = function(data) {
            onSuccess();
            return _this._feedLoading.decrease();
          };
          failureCallbackWrapper = function(data) {
            return _this._feedLoading.decrease();
          };
          params = {
            onSuccess: successCallbackWrapper,
            onFailure: failureCallbackWrapper
          };
          return this._request.get('news_feeds_active', params);
        };

        Persistence.prototype.createFeed = function(url, parentFolderId, onSuccess, onFailure) {
          var params;

          if (onSuccess == null) {
            onSuccess = null;
          }
          if (onFailure == null) {
            onFailure = null;
          }
          onSuccess || (onSuccess = function() {});
          onFailure || (onFailure = function() {});
          params = {
            data: {
              parentFolderId: parentFolderId,
              url: url
            },
            onSuccess: onSuccess,
            onFailure: onFailure
          };
          return this._request.post('news_feeds_create', params);
        };

        Persistence.prototype.deleteFeed = function(feedId) {
          var params;

          params = {
            routeParams: {
              feedId: feedId
            }
          };
          return this._request["delete"]('news_feeds_delete', params);
        };

        Persistence.prototype.restoreFeed = function(feedId, onSuccess) {
          var params;

          if (onSuccess == null) {
            onSuccess = null;
          }
          onSuccess || (onSuccess = function() {});
          params = {
            onSuccess: onSuccess,
            routeParams: {
              feedId: feedId
            }
          };
          return this._request.post('news_feeds_restore', params);
        };

        Persistence.prototype.moveFeed = function(feedId, folderId) {
          /*
          			moves a feed to a new folder
          */

          var params;

          params = {
            routeParams: {
              feedId: feedId
            },
            data: {
              parentFolderId: folderId
            }
          };
          return this._request.post('news_feeds_move', params);
        };

        Persistence.prototype.setFeedRead = function(feedId, highestItemId) {
          /*
          			sets all items of a feed as read
          */

          var params;

          params = {
            routeParams: {
              feedId: feedId
            },
            data: {
              highestItemId: highestItemId
            }
          };
          return this._request.post('news_feeds_read', params);
        };

        Persistence.prototype.updateFeed = function(feedId) {
          /*
          			moves a feed to a new folder
          */

          var params;

          params = {
            routeParams: {
              feedId: feedId
            }
          };
          return this._request.post('news_feeds_update', params);
        };

        Persistence.prototype.importGoogleReader = function(json, onSuccess) {
          var params;

          params = {
            data: {
              json: json
            },
            onSuccess: onSuccess
          };
          return this._request.post('news_feeds_import_googlereader', params);
        };

        /*
        			FOLDER CONTROLLER
        */


        Persistence.prototype.getAllFolders = function(onSuccess, showLoading) {
          var failureCallbackWrapper, params, successCallbackWrapper,
            _this = this;

          if (showLoading == null) {
            showLoading = true;
          }
          onSuccess || (onSuccess = function() {});
          if (showLoading) {
            this._feedLoading.increase();
            successCallbackWrapper = function(data) {
              onSuccess();
              return _this._feedLoading.decrease();
            };
            failureCallbackWrapper = function(data) {
              return _this._feedLoading.decrease();
            };
          } else {
            successCallbackWrapper = function(data) {
              return onSuccess();
            };
            failureCallbackWrapper = function(data) {};
          }
          params = {
            onSuccess: successCallbackWrapper,
            onFailure: failureCallbackWrapper
          };
          return this._request.get('news_folders', params);
        };

        Persistence.prototype.openFolder = function(folderId) {
          /*
          			Save if a folder was opened
          */

          var params;

          params = {
            routeParams: {
              folderId: folderId
            }
          };
          return this._request.post('news_folders_open', params);
        };

        Persistence.prototype.collapseFolder = function(folderId) {
          /*
          			Save if a folder was collapsed
          */

          var params;

          params = {
            routeParams: {
              folderId: folderId
            }
          };
          return this._request.post('news_folders_collapse', params);
        };

        Persistence.prototype.createFolder = function(folderName, parentFolderId, onSuccess, onFailure) {
          var params;

          if (parentFolderId == null) {
            parentFolderId = 0;
          }
          if (onSuccess == null) {
            onSuccess = null;
          }
          if (onFailure == null) {
            onFailure = null;
          }
          onSuccess || (onSuccess = function() {});
          onFailure || (onFailure = function() {});
          params = {
            data: {
              folderName: folderName,
              parentFolderId: parentFolderId
            },
            onSuccess: onSuccess,
            onFailure: onFailure
          };
          return this._request.post('news_folders_create', params);
        };

        Persistence.prototype.deleteFolder = function(folderId) {
          /*
          			Save if a folder was collapsed
          */

          var params;

          params = {
            routeParams: {
              folderId: folderId
            }
          };
          return this._request["delete"]('news_folders_delete', params);
        };

        Persistence.prototype.restoreFolder = function(folderId, onSuccess) {
          var params;

          if (onSuccess == null) {
            onSuccess = null;
          }
          onSuccess || (onSuccess = function() {});
          params = {
            onSuccess: onSuccess,
            routeParams: {
              folderId: folderId
            }
          };
          return this._request.post('news_folders_restore', params);
        };

        Persistence.prototype.renameFolder = function(folderId, folderName) {
          /*
          			Save if a folder was collapsed
          */

          var params;

          params = {
            routeParams: {
              folderId: folderId
            },
            data: {
              folderName: folderName
            }
          };
          return this._request.post('news_folders_rename', params);
        };

        Persistence.prototype.setFolderRead = function(folderId, highestItemId) {
          /*
          			sets all items of a folder as read
          */

          var params;

          params = {
            routeParams: {
              folderId: folderId
            },
            data: {
              highestItemId: highestItemId
            }
          };
          return this._request.post('news_folders_read', params);
        };

        /*
        			EXPORT CONTROLLER
        */


        Persistence.prototype.exportOPML = function() {
          /*
          			Prompts for an OPML download
          */
          return this._request.get('news_export_opml');
        };

        /*
        			USERSETTINGS CONTROLLER
        */


        Persistence.prototype.userSettingsRead = function(onSuccess) {
          var failureCallbackWrapper, params, successCallbackWrapper,
            _this = this;

          if (onSuccess == null) {
            onSuccess = null;
          }
          /*
          			Gets the configs for read settings
          */

          onSuccess || (onSuccess = function() {});
          this._feedLoading.increase();
          successCallbackWrapper = function(data) {
            onSuccess();
            return _this._feedLoading.decrease();
          };
          failureCallbackWrapper = function(data) {
            return _this._feedLoading.decrease();
          };
          params = {
            onSuccess: successCallbackWrapper,
            onFailure: failureCallbackWrapper
          };
          return this._request.get('news_usersettings_read', params);
        };

        Persistence.prototype.userSettingsReadShow = function(callback) {
          /*
          			Sets the reader mode to show all
          */

          var data;

          data = {
            onSuccess: callback
          };
          return this._request.post('news_usersettings_read_show', data);
        };

        Persistence.prototype.userSettingsReadHide = function(callback) {
          /*
          			Sets the reader mode to show only unread
          */

          var data;

          data = {
            onSuccess: callback
          };
          return this._request.post('news_usersettings_read_hide', data);
        };

        Persistence.prototype.userSettingsLanguage = function(onSuccess) {
          var data, failureCallbackWrapper, successCallbackWrapper,
            _this = this;

          if (onSuccess == null) {
            onSuccess = null;
          }
          onSuccess || (onSuccess = function() {});
          this._feedLoading.increase();
          successCallbackWrapper = function(data) {
            onSuccess();
            return _this._feedLoading.decrease();
          };
          failureCallbackWrapper = function(data) {
            return _this._feedLoading.decrease();
          };
          data = {
            onSuccess: successCallbackWrapper,
            onFailure: failureCallbackWrapper
          };
          return this._request.get('news_usersettings_language', data);
        };

        Persistence.prototype._triggerHideRead = function() {
          return this._$rootScope.$broadcast('triggerHideRead');
        };

        return Persistence;

      })();
      return new Persistence(Request, FeedLoading, AutoPageLoading, NewLoading, Config, ActiveFeed, $rootScope);
    }
  ]);

}).call(this);

// Generated by CoffeeScript 1.6.2
/*

ownCloud - News

@author Bernhard Posselt
@copyright 2012 Bernhard Posselt nukeawhale@gmail.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
License as published by the Free Software Foundation; either
version 3 of the License, or any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU AFFERO GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU Affero General Public
License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  angular.module('News').factory('Request', [
    '_Request', '$http', 'Publisher', 'Router', function(_Request, $http, Publisher, Router) {
      return new _Request($http, Publisher, Router);
    }
  ]);

  angular.module('News').factory('FeedLoading', [
    '_Loading', function(_Loading) {
      return new _Loading();
    }
  ]);

  angular.module('News').factory('AutoPageLoading', [
    '_Loading', function(_Loading) {
      return new _Loading();
    }
  ]);

  angular.module('News').factory('NewLoading', [
    '_Loading', function(_Loading) {
      return new _Loading();
    }
  ]);

  angular.module('News').factory('Publisher', [
    '_Publisher', 'ActiveFeed', 'ShowAll', 'StarredCount', 'ItemModel', 'FolderModel', 'FeedModel', 'Language', 'NewestItem', function(_Publisher, ActiveFeed, ShowAll, StarredCount, ItemModel, FolderModel, FeedModel, Language, NewestItem) {
      var publisher;

      publisher = new _Publisher();
      publisher.subscribeObjectTo(ActiveFeed, 'activeFeed');
      publisher.subscribeObjectTo(ShowAll, 'showAll');
      publisher.subscribeObjectTo(Language, 'language');
      publisher.subscribeObjectTo(StarredCount, 'starred');
      publisher.subscribeObjectTo(FolderModel, 'folders');
      publisher.subscribeObjectTo(FeedModel, 'feeds');
      publisher.subscribeObjectTo(ItemModel, 'items');
      publisher.subscribeObjectTo(NewestItem, 'newestItemId');
      return publisher;
    }
  ]);

}).call(this);

// Generated by CoffeeScript 1.6.2
/*

ownCloud - News

@author Bernhard Posselt
@copyright 2012 Bernhard Posselt nukeawhale@gmail.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
License as published by the Free Software Foundation; either
version 3 of the License, or any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU AFFERO GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU Affero General Public
License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  angular.module('News').factory('ShowAll', function() {
    var ShowAll;

    ShowAll = (function() {
      function ShowAll() {
        this._showAll = false;
      }

      ShowAll.prototype.handle = function(data) {
        return this._showAll = data;
      };

      ShowAll.prototype.getShowAll = function() {
        return this._showAll;
      };

      ShowAll.prototype.setShowAll = function(showAll) {
        return this._showAll = showAll;
      };

      return ShowAll;

    })();
    return new ShowAll();
  });

}).call(this);

// Generated by CoffeeScript 1.6.2
/*

ownCloud - News

@author Bernhard Posselt
@copyright 2012 Bernhard Posselt nukeawhale@gmail.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
License as published by the Free Software Foundation; either
version 3 of the License, or any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU AFFERO GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU Affero General Public
License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  angular.module('News').factory('StarredCount', function() {
    var StarredCount;

    StarredCount = (function() {
      function StarredCount() {
        this._count = 0;
      }

      StarredCount.prototype.handle = function(data) {
        return this._count = data;
      };

      StarredCount.prototype.setStarredCount = function(count) {
        return this._count = count;
      };

      StarredCount.prototype.getStarredCount = function() {
        return this._count;
      };

      return StarredCount;

    })();
    return new StarredCount();
  });

}).call(this);

// Generated by CoffeeScript 1.6.2
/*

ownCloud - News

@author Bernhard Posselt
@copyright 2012 Bernhard Posselt nukeawhale@gmail.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
License as published by the Free Software Foundation; either
version 3 of the License, or any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU AFFERO GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU Affero General Public
License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  angular.module('News').factory('StatusFlag', function() {
    return {
      UNREAD: 0x02,
      STARRED: 0x04,
      DELETED: 0x08,
      UPDATED: 0x16
    };
  });

}).call(this);

// Generated by CoffeeScript 1.6.2
/*

ownCloud - News

@author Bernhard Posselt
@copyright 2012 Bernhard Posselt nukeawhale@gmail.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
License as published by the Free Software Foundation; either
version 3 of the License, or any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU AFFERO GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU Affero General Public
License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  angular.module('News').factory('unreadCountFormatter', function() {
    return function(unreadCount) {
      if (unreadCount > 99) {
        unreadCount = '99+';
      }
      return unreadCount;
    };
  });

}).call(this);

})(window.angular, window.jQuery, window.moment);